package workWithThreads.executorAndOth;

import java.util.ArrayList;
import java.util.concurrent.*;

public class ThreadPoolExecutorsTest {

/** Короче, мы создаем связку из фиксированного количества потоков, в методе execute или submit,
 * мы указываем задачу, которая будет равномерно разделена между ними. Я это так понимаю, хз. */
    public static void main(String[] args) throws Exception {
//ExecutorService который выполняет каждую отправленную задачу, используя один или несколько объединенных в пул потоков,
// обычно настроенных с использованием Executors фабричных методов.
//Пулы потоков решают две разные проблемы: они обычно обеспечивают повышенную производительность при выполнении большого количества асинхронных задач
// из-за снижения накладных расходов на вызовы для каждой задачи и предоставляют средства ограничения и управления ресурсами,
// включая потоки, потребляемые при выполнении набора задач.
// Каждый ThreadPoolExecutor также поддерживает некоторые основные статистические данные, такие как количество выполненных задач.
// Сам по себе имеет удобный стек переменных для ручной настройки, однако советуется использовать уже созданные конфигурации
// с помощью класса Executors.
        ThreadPoolExecutor exec = (ThreadPoolExecutor) Executors.newFixedThreadPool(5); // Внутри реализована BlockingQueue
        // Сам по себе имеет огромное количество полезных методов, в которых надо разбираться. Саму конфигурацию, созданную
        // Executors, можно гибко менять в течение работы с данным классом, с помощью разнообразных методов.
    }
}
